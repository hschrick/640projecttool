{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TypeOut = function (_Component) {\n  _inherits(TypeOut, _Component);\n\n  function TypeOut(props) {\n    _classCallCheck(this, TypeOut);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.state = {\n      currentSentence: _this.props.words[0]\n    };\n    _this.addChar = _this.addChar.bind(_this);\n    _this.removeChar = _this.removeChar.bind(_this);\n    _this.changeWord = _this.changeWord.bind(_this);\n    return _this;\n  }\n\n  TypeOut.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.words.length < 1) {\n      console.warn('react-typeout requires a length minimum of one');\n      return;\n    }\n\n    this.changeWord(null, this.props.words);\n  };\n  /**\n   * Clear timouts when unmounting so we can escape our recursive loop\n   */\n\n\n  TypeOut.prototype.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.addTimeout);\n    clearTimeout(this.removeTimeout);\n  };\n\n  TypeOut.prototype.setNewOrder = function setNewOrder(words, random) {\n    return random ? (0, _utils.shuffle)(words) : (0, _utils.move)(words);\n  };\n\n  TypeOut.prototype.popLastWord = function popLastWord(words, lastWord, infinitive) {\n    return infinitive ? words : (0, _utils.pop)(words, lastWord);\n  };\n  /**\n   * Alters currentSentence string to include one more char\n   *\n   * @param  {Number} index   The current index of the word we slicing\n   * @param  {Number} max     The max length of the word.\n   * @param  {string} word    The entire word.\n   */\n\n\n  TypeOut.prototype.addChar = function addChar(index, max, words) {\n    var _this2 = this;\n\n    var _props = this.props,\n        typeSpeed = _props.typeSpeed,\n        pauseSpeed = _props.pauseSpeed; // When we get to the last char in the word we stop read the pauseSpeed\n    // instead of the typeSpeed\n\n    var addSpeed = index < max ? typeSpeed : pauseSpeed;\n    var currentSentence = (0, _utils.getFirst)(words).slice(0, index);\n    this.setState({\n      currentSentence: currentSentence\n    });\n    this.addTimeout = setTimeout(function () {\n      // After the timeout is done we check if we can add a new char to our\n      // word or if we need to start removming chars\n      return index < max ? _this2.addChar(index + 1, max, words) : _this2.removeChar(index, 0, words);\n    }, addSpeed);\n  };\n  /**\n   * Alters currentSentence string to remove one more char\n   *\n   * @param  {Number} index   The current index of the word we slicing\n   * @param  {Number} min     The min length of the word.\n   * @param  {string} word    The entire word.\n   */\n\n\n  TypeOut.prototype.removeChar = function removeChar(index, min, words) {\n    var _this3 = this;\n\n    var rewindSpeed = this.props.rewindSpeed;\n    var currentSentence = (0, _utils.getFirst)(words).slice(0, index);\n    this.setState({\n      currentSentence: currentSentence\n    });\n    this.removeTimeout = setTimeout(function () {\n      // After the timeout is done we check if we can add a new char to our\n      // word or if we need to start removming chars\n      return index > min ? _this3.removeChar(index - 1, min, words) : _this3.changeWord((0, _utils.getFirst)(words), words);\n    }, rewindSpeed);\n  };\n  /**\n   * Selects the new word to render out or exits the recurtion\n   *\n   * @param  {String} lastWord  Prev word that was called/typed out\n   * @param  {Array}  words     Array of all the words\n   */\n\n\n  TypeOut.prototype.changeWord = function changeWord() {\n    var lastWord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var words = arguments[1];\n    var _props2 = this.props,\n        random = _props2.random,\n        infinitive = _props2.infinitive,\n        done = _props2.done;\n    var newOrderWords = this.setNewOrder(this.popLastWord(words, lastWord, infinitive), random);\n    return newOrderWords.length // eslint-disable-line\n    ? this.addChar(0, (0, _utils.getFirst)(newOrderWords).length, newOrderWords) : typeof done === 'function' ? done() : null;\n  };\n\n  TypeOut.prototype.render = function render() {\n    var _state$currentSentenc = this.state.currentSentence,\n        currentSentence = _state$currentSentenc === undefined ? null : _state$currentSentenc;\n    var _props3 = this.props,\n        className = _props3.className,\n        caret = _props3.caret,\n        Node = _props3.Node;\n    var caretNode = caret ? _react2.default.createElement('span', {\n      className: 'react-typeout-caret'\n    }, '|') : null;\n    return _react2.default.createElement(Node, {\n      className: className\n    }, _react2.default.createElement('span', {\n      className: 'react-typeout-text'\n    }, currentSentence), caretNode);\n  };\n\n  return TypeOut;\n}(_react.Component);\n\nTypeOut.defaultProps = {\n  words: [],\n  infinitive: true,\n  random: false,\n  currentSentence: null,\n  pauseSpeed: 1000,\n  rewindSpeed: 50,\n  typeSpeed: 200,\n  done: null,\n  className: 'react-typeout',\n  Node: 'div',\n  caret: false\n};\nTypeOut.propTypes = {\n  infinitive: _propTypes2.default.bool,\n  random: _propTypes2.default.bool,\n  words: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,\n  pauseSpeed: _propTypes2.default.number,\n  rewindSpeed: _propTypes2.default.number,\n  typeSpeed: _propTypes2.default.number,\n  done: _propTypes2.default.func,\n  className: _propTypes2.default.string,\n  Node: _propTypes2.default.string,\n  caret: _propTypes2.default.bool\n};\nexports.default = TypeOut;","map":null,"metadata":{},"sourceType":"script"}