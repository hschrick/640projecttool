{"ast":null,"code":"import _classCallCheck from \"/Users/harrisschrick/Desktop/640projecttool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/harrisschrick/Desktop/640projecttool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/harrisschrick/Desktop/640projecttool/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/harrisschrick/Desktop/640projecttool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/harrisschrick/Desktop/640projecttool/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/harrisschrick/Desktop/640projecttool/src/components/landingpage.js\";\nimport React, { Component } from 'react';\nimport { Grid, Cell, Footer, FooterSection, FooterLinkList } from 'react-mdl';\n\nvar Landing =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Landing, _Component);\n\n  function Landing() {\n    _classCallCheck(this, Landing);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Landing).apply(this, arguments));\n  }\n\n  _createClass(Landing, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"executive-summary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"aboutme-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \"  Selenium is a web browser automation testing tool. Its main functions are for creating scripts in order to reproduce bugs and for automated testing. How it works is it records the browser and how the user interacts with the browser in order to optimize testing time and costs.\"), React.createElement(\"p\", {\n        className: \"aboutme-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"   Appium is better described as a mobile version of Selenium which is a web browser automation tool for testing. The difference with Appium being that it takes into account and uses Selenium type commands for actions like swiping, zooming with more than one gesture and pressing instead of clicking.\"), React.createElement(\"p\", {\n        className: \"aboutme-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"   Appium not only works for testing native applications but also for hybrid applications which are apps that contain mobile programs built in html5/javascript inside of native code like objective-c/swift. The benefit of writing hybrid programs is that you are able to write the same code for multiple platforms which helps test costs and time costs and Appium being cross platform is perfect for testing these cases by allowing the reuse of tests/code for each platform.\"), React.createElement(\"p\", {\n        className: \"aboutme-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"So what exactly is Appium? How does it work exactly? Appium is a web server that shows \\u201Crest api\\u201D which is a representational state transfer api. Which is a website that responds to an api request. What rest api\\u2019s allow us to do with a tool like Appium is to allow us to make certain requests to apps we are testing and receive a response with results from what we requested from the application as it is working. ie a live test!\")));\n    }\n  }]);\n\n  return Landing;\n}(Component);\n\nexport default Landing;","map":{"version":3,"sources":["/Users/harrisschrick/Desktop/640projecttool/src/components/landingpage.js"],"names":["React","Component","Grid","Cell","Footer","FooterSection","FooterLinkList","Landing"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,aAA5B,EAA2CC,cAA3C,QAAgE,WAAhE;;IAMMC,O;;;;;;;;;;;;;6BACI;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kSADF,EAGE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wTAHF,EAKE;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,meALF,EAOI;AAAG,QAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wcAPJ,CADJ,CADF;AAyBD;;;;EA3BmBN,S;;AA8BtB,eAAeM,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Grid, Cell, Footer, FooterSection, FooterLinkList} from 'react-mdl';\n\n\n\n\n\nclass Landing extends Component {\n  render(){\n    return(\n      <div>\n          <div className=\"executive-summary\">\n            <p className=\"aboutme-side\">  Selenium is a web browser automation testing tool. Its main functions are for creating scripts in order to reproduce bugs and for automated testing. How it works is it records the browser and how the user interacts with the browser in order to optimize testing time and costs.</p>\n\n            <p className=\"aboutme-side\">   Appium is better described as a mobile version of Selenium which is a web browser automation tool for testing. The difference with Appium being that it takes into account and uses Selenium type commands for actions like swiping, zooming with more than one gesture and pressing instead of clicking.</p>\n\n            <p className=\"aboutme-side\">   Appium not only works for testing native applications but also for hybrid applications which are apps that contain mobile programs built in html5/javascript inside of native code like objective-c/swift. The benefit of writing hybrid programs is that you are able to write the same code for multiple platforms which helps test costs and time costs and Appium being cross platform is perfect for testing these cases by allowing the reuse of tests/code for each platform.</p>\n\n              <p className=\"aboutme-side\">So what exactly is Appium? How does it work exactly? Appium is a web server that shows “rest api” which is a representational state transfer api. Which is a website that responds to an api request. What rest api’s allow us to do with a tool like Appium is to allow us to make certain requests to apps we are testing and receive a response with results from what we requested from the application as it is working. ie a live test!</p>\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n          </div>\n\n    )\n  }\n}\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}